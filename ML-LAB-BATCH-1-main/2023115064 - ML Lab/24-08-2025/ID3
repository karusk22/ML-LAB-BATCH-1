{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyN64LVPVgobRoL5UEJqR53q"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"Dcrdwq-ewC1m","executionInfo":{"status":"ok","timestamp":1756108435017,"user_tz":-330,"elapsed":694,"user":{"displayName":"Sankara Krishnan P","userId":"14436849533260778978"}},"outputId":"5563d610-b969-4461-c856-77755a1329a7","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"stream","name":"stdout","text":["Decision Tree:\n","{'Age': {'Young': {'Student': {'No': 'No', 'Yes': 'Yes'}}, 'Middle-aged': 'Yes', 'Old': {'Credit': {'Fair': 'Yes', 'Excellent': 'No'}}}}\n"]}],"source":["import math\n","import pandas as pd\n","\n","data = {\n","    'Age': ['Young', 'Young', 'Middle-aged', 'Old', 'Old', 'Old', 'Middle-aged', 'Young', 'Young', 'Old', 'Young', 'Middle-aged', 'Middle-aged', 'Old'],\n","    'Income': ['High', 'High', 'High', 'Medium', 'Low', 'Low', 'Low', 'Medium', 'Low', 'Medium', 'Medium', 'Medium', 'High', 'Medium'],\n","    'Student': ['No', 'No', 'No', 'No', 'Yes', 'Yes', 'Yes', 'No', 'Yes', 'Yes', 'Yes', 'No', 'Yes', 'No'],\n","    'Credit': ['Fair', 'Excellent', 'Fair', 'Fair', 'Fair', 'Excellent', 'Excellent', 'Fair', 'Fair', 'Fair', 'Excellent', 'Excellent', 'Fair', 'Excellent'],\n","    'BuysComputer': ['No', 'No', 'Yes', 'Yes', 'Yes', 'No', 'Yes', 'No', 'Yes', 'Yes', 'Yes', 'Yes', 'Yes', 'No']\n","}\n","\n","df = pd.DataFrame(data)\n","\n","def entropy(target_col):\n","    elements, counts = zip(*target_col.value_counts().items())\n","    total = len(target_col)\n","    ent = 0\n","    for i in range(len(elements)):\n","        p = counts[i]/total\n","        ent -= p * math.log2(p)\n","    return ent\n","\n","def info_gain(data, split_attribute, target_name):\n","    total_entropy = entropy(data[target_name])\n","    vals, counts = zip(*data[split_attribute].value_counts().items())\n","    weighted_entropy = 0\n","    for i in range(len(vals)):\n","        subset = data[data[split_attribute] == vals[i]]\n","        weighted_entropy += (counts[i]/sum(counts)) * entropy(subset[target_name])\n","    return total_entropy - weighted_entropy\n","\n","def id3(data, originaldata, features, target_attribute_name, parent_class=None):\n","    if len(data[target_attribute_name].unique()) <= 1:\n","        return data[target_attribute_name].iloc[0]\n","\n","    elif len(data) == 0:\n","        return originaldata[target_attribute_name].mode()[0]\n","\n","    elif len(features) == 0:\n","        return parent_class\n","\n","    else:\n","        parent_class = data[target_attribute_name].mode()[0]\n","        gains = [info_gain(data, feature, target_attribute_name) for feature in features]\n","        best_feature_index = gains.index(max(gains))\n","        best_feature = features[best_feature_index]\n","\n","        tree = {best_feature: {}}\n","\n","        for value in data[best_feature].unique():\n","            sub_data = data[data[best_feature] == value]\n","            new_features = [f for f in features if f != best_feature]\n","            subtree = id3(sub_data, data, new_features, target_attribute_name, parent_class)\n","            tree[best_feature][value] = subtree\n","\n","        return tree\n","\n","# Run ID3\n","features = list(df.columns[:-1])\n","target = 'BuysComputer'\n","decision_tree = id3(df, df, features, target)\n","\n","print(\"Decision Tree:\")\n","print(decision_tree)\n"]}]}